global
    daemon
    maxconn 100000
    nbproc 1
    nbthread 8
    log 127.0.0.1:514 local0
    stats socket /var/run/ultrabalancer.sock mode 600
    pidfile /var/run/ultrabalancer.pid
    tune.bufsize 32768
    tune.maxrewrite 16384
    tune.ssl.cachesize 100000
    tune.ssl.lifetime 600
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+AES256:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
    mode http
    timeout connect 5s
    timeout client 30s
    timeout server 30s
    timeout http-request 10s
    timeout http-keep-alive 60s
    timeout check 2s
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    maxconn 50000
    compression algo gzip
    compression type text/html text/css text/javascript application/json

frontend web_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/site.pem alpn h2,http/1.1
    redirect scheme https if !{ ssl_fc }
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"

    acl is_static path_end .jpg .jpeg .gif .png .css .js .ico .woff .woff2
    acl is_api path_beg /api/
    acl is_admin path_beg /admin/
    acl is_websocket hdr(Upgrade) -i WebSocket
    acl is_healthcheck path /health

    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }

    use_backend static_servers if is_static
    use_backend api_servers if is_api
    use_backend admin_servers if is_admin
    use_backend websocket_servers if is_websocket
    use_backend health_backend if is_healthcheck
    default_backend web_servers

backend web_servers
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    cookie SERVERID insert indirect nocache
    server web1 192.168.1.10:8080 check weight 100 cookie web1 maxconn 1000
    server web2 192.168.1.11:8080 check weight 100 cookie web2 maxconn 1000
    server web3 192.168.1.12:8080 check weight 50 cookie web3 maxconn 500 backup

backend static_servers
    balance uri depth 3
    hash-type consistent
    cache static_cache
        total-max-size 256
        max-object-size 10485760
        max-age 3600
    http-request cache-use static_cache
    http-response cache-store static_cache
    server cdn1 cdn1.example.com:80 check
    server cdn2 cdn2.example.com:80 check

backend api_servers
    balance leastconn
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ api.example.com
    http-check expect rstring {"status":"ok"}
    stick-table type ip size 100k expire 30m
    stick on src
    server api1 10.0.1.10:3000 check ssl verify none weight 100
    server api2 10.0.1.11:3000 check ssl verify none weight 100
    server api3 10.0.1.12:3000 check ssl verify none weight 100

backend admin_servers
    balance source
    acl admin_network src 10.0.0.0/8 192.168.0.0/16
    http-request deny unless admin_network
    server admin1 10.0.2.10:9000 check
    server admin2 10.0.2.11:9000 check

backend websocket_servers
    balance source
    hash-type consistent
    timeout tunnel 1h
    timeout client 1h
    timeout server 1h
    server ws1 10.0.3.10:8080 check
    server ws2 10.0.3.11:8080 check

backend health_backend
    server local 127.0.0.1:8081

listen stats
    bind *:8080
    stats enable
    stats uri /stats
    stats refresh 30s
    stats show-legends
    stats show-node
    stats auth admin:password
    stats admin if TRUE

listen mysql_cluster
    bind *:3306
    mode tcp
    balance leastconn
    option mysql-check user haproxy
    server mysql1 10.0.4.10:3306 check weight 100
    server mysql2 10.0.4.11:3306 check weight 100
    server mysql3 10.0.4.12:3306 check weight 50 backup

listen redis_cluster
    bind *:6379
    mode tcp
    balance source
    option tcp-check
    tcp-check send PING\r\n
    tcp-check expect string +PONG
    tcp-check send QUIT\r\n
    tcp-check expect string +OK
    server redis1 10.0.5.10:6379 check
    server redis2 10.0.5.11:6379 check
    server redis3 10.0.5.12:6379 check